#!/usr/bin/perl

###########################################
#                                         #
# cla-ssh: Command Line Assistant for SSH #
#                                         #
# Author:  Bryan T. Meyers                #
# Year:    2017                           #
# License: MIT                            #
#                                         #
###########################################

## Imports
use Switch;
use warnings;

## "Constants"
my $backtitle = "\"cla-ssh: Command Line Assistant for SSH\"";

## GLOBALS
my $HOST;
my $NAME;
my $BITS = 2048;
my %KEYS;
my $CHOICES;
my $exitstatus = 0;

## Display Welcome Message
sub welcome {
    my $cmd = 'whiptail'
    . " --backtitle $backtitle"
    . ' --title "Welcome to cla-ssh"'
    . ' --msgbox "This tool will allow you to manage SSH keys in a safe, easy way.\n\n                      Let\'s get started!"'
    . ' 9 68'
    . " 3>&1 1>&2 2>&3";
    `$cmd`;
    return;
}

## Set up SSH Config
sub setup {

    ## Check for SSH Config Directory
    unless ( -d "~/.ssh" ) {
        mkdir "~/.ssh";
    }

    ## Check for SSH Config
    my $file = "~/.ssh/config";

    unless( -e $file ) {
        `touch $file`;
    }
    return;
}

## Select an Operating Mode
sub selectMode {
    my $cmd = "whiptail --backtitle $backtitle"
    . " --title \"Pick a Task\""
    . " --cancel-button \"Quit\""
    . " --menu \"Choose From:\""
    . " 12 68 5"
    . ' "Create" "Generate a New Key"'
    . ' "Update" "Change Settings for a Key"'
    . ' "Replace" "Update an Existing Key"'
    . ' "Remove" "Delete an Existing Key"'
    . ' "Save" "Write Configuration"'
    . " 3>&1 1>&2 2>&3";
    $MODE = `$cmd`;
    $exitstatus = $?;
    return;
}

## Select a Key
sub selectKey {
    my $cmd = "whiptail --backtitle $backtitle"
            . ' --title "Select a Key"'
            . ' --menu ""'
            . ' 12 68 5'
            . "$CHOICES"
            . " 3>&1 1>&2 2>&3";
    $HOST = `$cmd`;
    $exitstatus = $?;
    return;
}

## Select a Field
sub selectField {
    my $field;
    my $cmd = "whiptail --backtitle $backtitle"
            . ' --title "Select a Field"'
            . ' --menu ""'
            . ' 12 68 5'
            . "$CHOICES"
            . " 3>&1 1>&2 2>&3";
    $field = `$cmd`;
    $exitstatus = $?;
    return $field;
}

## Select a New Key
sub newKey {
    my $cmd = 'whiptail'
            . " --backtitle $backtitle"
            . ' --title "New Key"'
            . ' --inputbox "\nEnter a Key Name:"'
            . ' 9 68';
    if ( length $HOST ) { $cmd .= " $HOST"; }
    $cmd .= " 3>&1 1>&2 2>&3";
    $HOST = `$cmd`;
    $exitstatus = $?;
    return;
}

## Select a New Key
sub selectHostName {
    my $cmd = 'whiptail'
            . " --backtitle $backtitle"
            . ' --title "Set Hostname"'
            . ' --inputbox "\nEnter a Hostname:"'
            . ' 9 68';
    if ( length $NAME ) { $cmd .= " $NAME"; }
    $cmd .= " 3>&1 1>&2 2>&3";
    $NAME = `$cmd`;
    $exitstatus = $?;
    return;
}

## Select a Cipher
sub selectCipher {
    my $cmd = 'whiptail'
            . " --backtitle $backtitle"
            . ' --title "Choose a Cipher"'
            . ' --menu ""'
            . ' 12 68 5'
            . ' "ed25519" "Best"'
            . ' "rsa" "Better"'
            . ' "ecdsa" "Good"'
            . ' "dsa" "Worse"'
            . ' "rsa1" "Last Resort"';
    if ( length $CIPHER ) { $cmd .= " $CIPHER"; }
    $cmd .= " 3>&1 1>&2 2>&3";
    $CIPHER = `$cmd`;
    $exitstatus = $?;
    return;
}

## Select a Bit Width
sub selectBits {
    my $cmd = 'whiptail'
            . " --backtitle $backtitle"
            . ' --title "Choose a Key Length"'
            . ' --inputbox "Pick a number greater than 2000, but less than 10000 (speed). The more random, the better."'
            . ' 9 68';
    if ( length $BITS ) { $cmd .= " $BITS"; }
    $cmd .= " 3>&1 1>&2 2>&3";
    $BITS = `$cmd`;
    $exitstatus = $?;
    return;
}

## Read Config File
sub readConfig {
    my $KEYNAME = "";
    open(my $fh, "<", "$ENV{HOME}/.ssh/config" ) or die "$!";
    while (my $line = <$fh>) {
        chomp $line;
        $line =~ /^\s*(\S*)\s+(\S*)\s*$/;
        if ( length($1) && length($2) ) {
            if ( $1 eq "Host" ) {
                $KEYNAME = $2;
            } else {
                $KEYS{$KEYNAME}{$1} = $2;
            }
        }
    }
    close($fh);
    return;
}

## Get Key Choices for Menu
sub getChoices {
    $CHOICES = "";
    foreach $k (@_) {
        $CHOICES = "$CHOICES \"$k\" \"\"";
    }
    return;
}

## Update the value of a config field ##
sub updateField{
    my $field = $_[0];
    $cmd = 'whiptail'
         . " --backtitle $backtitle"
         . ' --title "Update Field"'
         . " --inputbox \"$field:\""
         . ' 9 68';
    if ( length $KEYS{$HOST}{$field} ) { $cmd .= " $KEYS{$HOST}{$field}"; }
    $cmd .= " 3>&1 1>&2 2>&3";
    $value = `$cmd`;
    if ( $? == 0) { $KEYS{$HOST}{$field} = $value; }
    return;
}

## Print Welcome
welcome();

## Make sure everything is set up
setup();

## Read in the existing key configurations
readConfig();

$exitstatus = $?;

## Run Multiple Times Until Quit
while ($exitstatus != 255 ) {

    # Ask for Mode
    selectMode();
    if ( $exitstatus >= 1 ) { exit; }
    if ( $exitstatus == 0 ) {

        # run through the mode
        switch ($MODE) {
            case "Create" {
                newKey();
                if ( $exitstatus == 0 ) { selectHostName(); }
                if ( $exitstatus == 0 ) { selectCipher(); }
                if ( $exitstatus == 0 ) { selectBits(); }
            }
            case "Update" {
                while( $exitstatus == 0 ){
                    # update the choices for menus
                    my @array = keys %KEYS;
                    getChoices(@array);
                    selectKey();
                    if ( $exitstatus == 0 ) {
                        getChoices(keys $KEYS{$HOST});
                        $CHOICES = ' "<Add>" ""' . " $CHOICES";
                        my $field = selectField();
                        if ( $exitstatus == 0 ) { updateField($field); }
                    }
                }
            }
            case "Replace" {
                my @array = keys %KEYS;
                   getChoices(@array);
                selectKey();
            }
            case "Remove" {
                my @array = keys %KEYS;
                   getChoices(@array);
                selectKey();
                delete $KEYS{$HOST};
            }
            case "Save" {
            }
        }

    }
}

